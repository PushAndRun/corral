import matplotlib
import numpy as np
import pandas as pd
import os

from matplotlib import pyplot as plt

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'

np.set_printoptions(precision=3, suppress=True)

matplotlib.interactive(True)
pd.options.plotting.backend = 'matplotlib'



job_column_names = ['job_id', 'tpch_query_id', 'polling_strategy', 'number_of_jobs', 'job_number_j',
                    'prev_job_bytes_written', 'splits', 'split_size', 'map_bin_size',
                    'reduce_bin_size', 'max_concurrency', 'backend', 'function_memory',
                    'cache_type', 'map_complexity', 'reduce_complexity', 'job_execution_time',
                    'experiment_note', 'map_bin_sizes', 'reduce_bin_sizes']

task_column_names = ['r_id', 'job_id', 'task_id', 'runtime_id', 'phase',
                     'job_number_t', 'number_of_inputs', 'bin_id', 'bin_size',
                     'total_execution_time', 'function_start_latency', 'function_execution_duration', 'poll_latency', 'poll_calculation_time',
                     'number_of_premature_polls', 'completed', 'failed', 'function_execution_start',
                     'function_execution_end', 'final_poll_time']

tasks = pd.read_csv('./taskLog_benchmarks.csv',
                    names=task_column_names,
                    na_values='?', comment='\t', quotechar='"', skiprows=1,
                    sep=',', skipinitialspace=True, low_memory=False)

jobs = pd.read_csv('./jobLog_benchmarks.csv',
                   names=job_column_names,
                   na_values='?', comment='\t', quotechar='"', skiprows=1,
                   sep=',', skipinitialspace=True, low_memory=False)


# remove duplicates and entries that were created by binsize maps
jobs = jobs.drop(['map_bin_sizes', 'reduce_bin_sizes'], axis=1)
jobs = jobs.drop_duplicates(subset=None, keep='first', inplace=False)

# remove failed tasks
tasks = tasks.query('failed != "true"').copy()
tasks = tasks.query('number_of_premature_polls >= 0').copy()


raw_dataset = pd.merge(jobs, tasks, how='inner', on='job_id', validate="one_to_many")

raw_dataset = raw_dataset.drop(
    ['r_id', 'job_id', 'task_id', 'function_memory', 'runtime_id', 'job_number_t', 'job_number_j', 'bin_id', 'function_execution_start',
     'function_execution_end', 'final_poll_time', 'completed', 'failed', 'backend',
     'cache_type', 'experiment_note'], axis=1)

dataset = raw_dataset.copy()
dataset = dataset.dropna()

dataset['total_execution_time'] = round(dataset['total_execution_time'] / 1000000, 0)
dataset['function_start_latency'] = round(dataset['function_start_latency'] / 1000000, 0)
dataset['function_execution_duration'] = round(dataset['function_execution_duration'] / 1000000, 0)
dataset['poll_calculation_time'] = round(dataset['poll_calculation_time'] / 1000000, 0)
dataset['poll_latency'] = round(dataset['poll_latency'] / 1000000, 0)
dataset['job_execution_time'] = round(dataset['job_execution_time'] / 1000000, 0)

#overall
print("------------------Overall--------------------")
print("Total execution time in ms:")
print(dataset['total_execution_time'].describe())
print("Total execution time for Q15 in ms:")
print(dataset.query('tpch_query_id == 15')['total_execution_time'].describe())
print()
print("Total execution time for Q18 in ms:")
print(dataset.query('tpch_query_id == 18')['total_execution_time'].describe())
print()
print("Total execution time for Q21 in ms:")
print(dataset.query('tpch_query_id == 21')['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(dataset['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(dataset['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(dataset['poll_latency'].describe())
print()
print("Number of premature polls:")
print(dataset['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(dataset['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(dataset['job_execution_time'].describe())

#create sub tables for each algorithm
const = dataset[dataset['polling_strategy'].str.contains("ConstantPolling")]
constQ15 = const.query('tpch_query_id == 15')
constQ18 = const.query('tpch_query_id == 18')
constQ21 = const.query('tpch_query_id == 21')
print("----------Constant Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(const['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(const['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(const['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(const['poll_latency'].describe())
print()
print("Number of premature polls:")
print(const['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(const['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(const['job_execution_time'].describe())
print()
print("------------------Q15 (const.)--------------------")
print("Total execution time in ms:")
print(constQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(constQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(constQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(constQ15['poll_latency'].describe())
print()
print("Number of premature polls:")
print(constQ15['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(constQ15['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(constQ15['job_execution_time'].describe())
print()
print("------------------Q18 (const.)--------------------")
print("Total execution time in ms:")
print(constQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(constQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(constQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(constQ18['poll_latency'].describe())
print()
print("Number of premature polls:")
print(constQ18['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(constQ18['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(constQ18['job_execution_time'].describe())
print()
print("------------------Q21 (const.)--------------------")
print("Total execution time in ms:")
print(constQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(constQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(constQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(constQ21['poll_latency'].describe())
print()
print("Number of premature polls:")
print(constQ21['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(constQ21['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(constQ21['job_execution_time'].describe())
print()

exponential = dataset[dataset['polling_strategy'].str.contains("ExponentialBackoffPolling")]
expQ15 = exponential.query('tpch_query_id == 15')
expQ18 = exponential.query('tpch_query_id == 18')
expQ21 = exponential.query('tpch_query_id == 21')
print("----------Exponential Backoff Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(exponential['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(exponential['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(exponential['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(exponential['poll_latency'].describe())
print()
print("Number of premature polls:")
print(exponential['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(exponential['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(exponential['job_execution_time'].describe())
print()
print("------------------Q15 (Exp.)--------------------")
print("Total execution time in ms:")
print(expQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(expQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(expQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(expQ15['poll_latency'].describe())
print()
print("Number of premature polls:")
print(expQ15['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(expQ15['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(expQ15['job_execution_time'].describe())
print()
print("------------------Q18 (Exp.)--------------------")
print("Total execution time in ms:")
print(expQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(expQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(expQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(expQ18['poll_latency'].describe())
print()
print("Number of premature polls:")
print(expQ18['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(expQ18['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(expQ18['job_execution_time'].describe())
print()
print("------------------Q21 (Exp.)--------------------")
print("Total execution time in ms:")
print(expQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(expQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(expQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(expQ21['poll_latency'].describe())
print()
print("Number of premature polls:")
print(expQ21['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(expQ21['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(expQ21['job_execution_time'].describe())
print()

squared = dataset[dataset['polling_strategy'].str.contains("SquaredBackoffPolling")]
squaredQ15 = squared.query('tpch_query_id == 15')
squaredQ18 = squared.query('tpch_query_id == 18')
squaredQ21 = squared.query('tpch_query_id == 21')
print("----------Squared Backoff Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(squared['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(squared['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(squared['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(squared['poll_latency'].describe())
print()
print("Number of premature polls:")
print(squared['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(squared['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(squared['job_execution_time'].describe())
print()
print("------------------Q15 (squared)--------------------")
print("Total execution time in ms:")
print(squaredQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(squaredQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(squaredQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(squaredQ15['poll_latency'].describe())
print()
print("Number of premature polls:")
print(squaredQ15['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(squaredQ15['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(squaredQ15['job_execution_time'].describe())
print()
print("------------------Q18 (squared)--------------------")
print("Total execution time in ms:")
print(squaredQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(squaredQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(squaredQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(squaredQ18['poll_latency'].describe())
print()
print("Number of premature polls:")
print(squaredQ18['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(squaredQ18['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(squaredQ18['job_execution_time'].describe())
print()
print("------------------Q21 (squared)--------------------")
print("Total execution time in ms:")
print(squaredQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(squaredQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(squaredQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(squaredQ21['poll_latency'].describe())
print()
print("Number of premature polls:")
print(squaredQ21['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(squaredQ21['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(squaredQ21['job_execution_time'].describe())
print()

linear = dataset[dataset['polling_strategy'].str.contains("LinearBackoffPolling")]
linearQ15 = linear.query('tpch_query_id == 15')
linearQ18 = linear.query('tpch_query_id == 18')
linearQ21 = linear.query('tpch_query_id == 21')
print("----------Linear Backoff Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(linear['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(linear['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(linear['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(linear['poll_latency'].describe())
print()
print("Number of premature polls:")
print(linear['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(linear['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(linear['job_execution_time'].describe())
print()
print("------------------Q15 (linear)--------------------")
print("Total execution time in ms:")
print(linearQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(linearQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(linearQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(linearQ15['poll_latency'].describe())
print()
print("Number of premature polls:")
print(linearQ15['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(linearQ15['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(linearQ15['job_execution_time'].describe())
print()
print("------------------Q18 (linear)--------------------")
print("Total execution time in ms:")
print(linearQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(linearQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(linearQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(linearQ18['poll_latency'].describe())
print()
print("Number of premature polls:")
print(linearQ18['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(linearQ18['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(linearQ18['job_execution_time'].describe())
print()
print("------------------Q21 (linear)--------------------")
print("Total execution time in ms:")
print(linearQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(linearQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(linearQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(linearQ21['poll_latency'].describe())
print()
print("Number of premature polls:")
print(linearQ21['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(linearQ21['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(linearQ21['job_execution_time'].describe())
print()

duplicate = dataset[dataset['polling_strategy'].str.contains("DuplicationBackoffPolling")]
duplicateQ15 = duplicate.query('tpch_query_id == 15')
duplicateQ18 = duplicate.query('tpch_query_id == 18')
duplicateQ21 = duplicate.query('tpch_query_id == 21')
print("----------Duplication Backoff Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(duplicate['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(duplicate['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(duplicate['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(duplicate['poll_latency'].describe())
print()
print("Number of premature polls:")
print(duplicate['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(duplicate['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(duplicate['job_execution_time'].describe())
print()
print("------------------Q15 (duplication)--------------------")
print("Total execution time in ms:")
print(duplicateQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(duplicateQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(duplicateQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(duplicateQ15['poll_latency'].describe())
print()
print("Number of premature polls:")
print(duplicateQ15['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(duplicateQ15['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(duplicateQ15['job_execution_time'].describe())
print()
print("------------------Q18 (duplication)--------------------")
print("Total execution time in ms:")
print(duplicateQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(duplicateQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(duplicateQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(duplicateQ18['poll_latency'].describe())
print()
print("Number of premature polls:")
print(duplicateQ18['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(duplicateQ18['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(duplicateQ18['job_execution_time'].describe())
print()
print("------------------Q21 (duplication)--------------------")
print("Total execution time in ms:")
print(duplicateQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(duplicateQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(duplicateQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(duplicateQ21['poll_latency'].describe())
print()
print("Number of premature polls:")
print(duplicateQ21['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(duplicateQ21['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(duplicateQ21['job_execution_time'].describe())
print()

average = dataset[dataset['polling_strategy'].str.contains("AveragePolling")]
averageQ15 = average.query('tpch_query_id == 15')
averageQ18 = average.query('tpch_query_id == 18')
averageQ21 = average.query('tpch_query_id == 21')
print("----------Average Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(average['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(average['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(average['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(average['poll_latency'].describe())
print()
print("Number of premature polls:")
print(average['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(average['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(average['job_execution_time'].describe())
print()
print("------------------Q15 (average)--------------------")
print("Total execution time in ms:")
print(averageQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(averageQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(averageQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(averageQ15['poll_latency'].describe())
print()
print("Number of premature polls:")
print(averageQ15['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(averageQ15['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(averageQ15['job_execution_time'].describe())
print()
print("------------------Q18 (average)--------------------")
print("Total execution time in ms:")
print(averageQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(averageQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(averageQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(averageQ18['poll_latency'].describe())
print()
print("Number of premature polls:")
print(averageQ18['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(averageQ18['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(averageQ18['job_execution_time'].describe())
print()
print("------------------Q21 (average)--------------------")
print("Total execution time in ms:")
print(averageQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(averageQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(averageQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(averageQ21['poll_latency'].describe())
print()
print("Number of premature polls:")
print(averageQ21['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(averageQ21['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(averageQ21['job_execution_time'].describe())
print()

moving = dataset[dataset['polling_strategy'].str.contains("MovingAveragePolling")]
movingQ15 = moving.query('tpch_query_id == 15')
movingQ18 = moving.query('tpch_query_id == 18')
movingQ21 = moving.query('tpch_query_id == 21')
print("----------Moving Average Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(moving['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(moving['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(moving['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(moving['poll_latency'].describe())
print()
print("Number of premature polls:")
print(moving['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(moving['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(moving['job_execution_time'].describe())
print()
print("------------------Q15 (moving average)--------------------")
print("Total execution time in ms:")
print(movingQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(movingQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(movingQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(movingQ15['poll_latency'].describe())
print()
print("Number of premature polls:")
print(movingQ15['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(movingQ15['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(movingQ15['job_execution_time'].describe())
print()
print("------------------Q18 (moving average)--------------------")
print("Total execution time in ms:")
print(movingQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(movingQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(movingQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(movingQ18['poll_latency'].describe())
print()
print("Number of premature polls:")
print(movingQ18['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(movingQ18['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(movingQ18['job_execution_time'].describe())
print()
print("------------------Q21 (moving average)--------------------")
print("Total execution time in ms:")
print(movingQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(movingQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(movingQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(movingQ21['poll_latency'].describe())
print()
print("Number of premature polls:")
print(movingQ21['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(movingQ21['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(movingQ21['job_execution_time'].describe())
print()

dataset = dataset.query('total_execution_time < 300000')
dataset['total_execution_time']=dataset['total_execution_time']/1000
dataset.hist(['total_execution_time'], bins=50)
plt.title('Total Execution Time Histogram')
plt.xlabel('Seconds')
plt.ylabel('Frequency')
plt.show(block=True)








