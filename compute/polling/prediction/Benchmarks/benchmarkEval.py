
import matplotlib
import numpy as np
import pandas
import pandas as pd
import os

from matplotlib import pyplot as plt

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'

np.set_printoptions(precision=3, suppress=True)

matplotlib.interactive(True)
pd.options.plotting.backend = 'matplotlib'



job_column_names = ['job_id', 'tpch_query_id', 'polling_strategy', 'number_of_jobs', 'job_number_j',
                    'prev_job_bytes_written', 'splits', 'split_size', 'map_bin_size',
                    'reduce_bin_size', 'max_concurrency', 'backend', 'function_memory',
                    'cache_type', 'map_complexity', 'reduce_complexity', 'job_execution_time',
                    'experiment_note', 'map_bin_sizes', 'reduce_bin_sizes']

task_column_names = ['r_id', 'job_id', 'task_id', 'runtime_id', 'phase',
                     'job_number_t', 'number_of_inputs', 'bin_id', 'bin_size',
                     'total_execution_time', 'function_start_latency', 'function_execution_duration', 'poll_latency', 'poll_calculation_time',
                     'number_of_premature_polls', 'completed', 'failed', 'function_execution_start',
                     'function_execution_end', 'final_poll_time']

tasks = pd.read_csv('./taskLog_benchmarks.csv',
                    names=task_column_names,
                    na_values='?', comment='\t', quotechar='"', skiprows=1,
                    sep=',', skipinitialspace=True, low_memory=False)

jobs = pd.read_csv('./jobLog_benchmarks.csv',
                   names=job_column_names,
                   na_values='?', comment='\t', quotechar='"', skiprows=1,
                   sep=',', skipinitialspace=True, low_memory=False)


# remove duplicates and entries that were created by binsize maps
jobs = jobs.drop(['map_bin_sizes', 'reduce_bin_sizes'], axis=1)
jobs = jobs.drop_duplicates(subset=None, keep='first', inplace=False)

# remove failed tasks
tasks = tasks.query('failed != "true"').copy()
tasks = tasks.query('number_of_premature_polls >= 0').copy()

jobs = jobs.query('experiment_note != "fitted"').copy()

raw_dataset = pd.merge(jobs, tasks, how='inner', on='job_id', validate="one_to_many")

raw_dataset = raw_dataset.drop(
    ['r_id', 'task_id', 'function_memory', 'runtime_id', 'job_number_t', 'job_number_j', 'bin_id', 'function_execution_start',
     'function_execution_end', 'final_poll_time', 'completed', 'failed', 'backend',
     'cache_type', 'experiment_note'], axis=1)

dataset = raw_dataset.copy()
dataset = dataset.dropna()


#Load fitted data separately
job_column_names2 = ['job_id', 'tpch_query_id', 'polling_strategy', 'number_of_jobs', 'job_number_j',
                    'prev_job_bytes_written', 'splits', 'split_size', 'map_bin_size',
                    'reduce_bin_size', 'max_concurrency', 'backend', 'function_memory',
                    'cache_type', 'map_complexity', 'reduce_complexity', 'job_execution_time',
                    'experiment_note', 'map_bin_sizes', 'reduce_bin_sizes']

task_column_names2 = ['r_id', 'job_id', 'task_id', 'runtime_id', 'phase',
                     'job_number_t', 'number_of_inputs', 'bin_id', 'bin_size',
                     'total_execution_time', 'function_start_latency', 'function_execution_duration', 'poll_latency', 'poll_calculation_time',
                     'number_of_premature_polls', 'completed', 'failed', 'function_execution_start',
                     'function_execution_end', 'final_poll_time']

tasksFitted = pd.read_csv('./taskLog_benchmarks.csv',
                    names=task_column_names2,
                    na_values='?', comment='\t', quotechar='"', skiprows=1,
                    sep=',', skipinitialspace=True, low_memory=False)

jobsFitted = pd.read_csv('./jobLog_benchmarks.csv',
                   names=job_column_names2,
                   na_values='?', comment='\t', quotechar='"', skiprows=1,
                   sep=',', skipinitialspace=True, low_memory=False)


# remove duplicates and entries that were created by binsize maps
jobsFitted = jobsFitted.drop(['map_bin_sizes', 'reduce_bin_sizes'], axis=1)
jobsFitted = jobsFitted.drop_duplicates(subset=None, keep='first', inplace=False)

# remove failed tasks
tasksFitted = tasksFitted.query('failed != "true"').copy()
tasksFitted = tasksFitted.query('number_of_premature_polls >= 0').copy()

jobsFitted = jobsFitted.query('experiment_note == "fitted"').copy()

raw_datasetFitted = pd.merge(jobsFitted, tasksFitted, how='inner', on='job_id', validate="one_to_many")

raw_datasetFitted = raw_datasetFitted.drop(
    ['r_id', 'task_id', 'function_memory', 'runtime_id', 'job_number_t', 'job_number_j', 'bin_id', 'function_execution_start',
     'function_execution_end', 'final_poll_time', 'completed', 'failed', 'backend',
     'cache_type', 'experiment_note'], axis=1)

datasetFitted = raw_datasetFitted.copy()
datasetFitted = datasetFitted.dropna()

datasetFitted['total_execution_time'] = datasetFitted['total_execution_time'] / 1000000000
datasetFitted['function_start_latency'] = datasetFitted['function_start_latency'] / 1000000000
datasetFitted['function_execution_duration'] = datasetFitted['function_execution_duration'] / 1000000000
datasetFitted['poll_calculation_time'] = datasetFitted['poll_calculation_time'] / 1000000
datasetFitted['poll_latency'] = datasetFitted['poll_latency'] / 1000000000
datasetFitted['job_execution_time'] = datasetFitted['job_execution_time'] / 1000000000

datasetFitted['total_execution_time'] = round(datasetFitted['total_execution_time'], 2)
datasetFitted['function_start_latency'] = round(datasetFitted['function_start_latency'], 2)
datasetFitted['function_execution_duration'] = round(datasetFitted['function_execution_duration'], 2)
datasetFitted['poll_calculation_time'] = round(datasetFitted['poll_calculation_time'], 2)
datasetFitted['poll_latency'] = round(datasetFitted['poll_latency'], 2)
datasetFitted['job_execution_time'] = round(datasetFitted['job_execution_time'], 2)

dataset['total_execution_time'] = dataset['total_execution_time'] / 1000000000
dataset['function_start_latency'] = dataset['function_start_latency'] / 1000000000
dataset['function_execution_duration'] = dataset['function_execution_duration'] / 1000000000
dataset['poll_calculation_time'] = dataset['poll_calculation_time'] / 1000000
dataset['poll_latency'] = dataset['poll_latency'] / 1000000000
dataset['job_execution_time'] = dataset['job_execution_time'] / 1000000000

dataset['total_execution_time'] = round(dataset['total_execution_time'], 2)
dataset['function_start_latency'] = round(dataset['function_start_latency'], 2)
dataset['function_execution_duration'] = round(dataset['function_execution_duration'], 2)
dataset['poll_calculation_time'] = round(dataset['poll_calculation_time'], 2)
dataset['poll_latency'] = round(dataset['poll_latency'], 2)
dataset['job_execution_time'] = round(dataset['job_execution_time'], 2)

#overall
print("------------------Overall--------------------")
print("Total execution time in ms:")
print(dataset['total_execution_time'].describe())
print("Total execution time for Q15 in ms:")
print(dataset.query('tpch_query_id == 15')['total_execution_time'].describe())
print()
print("Total execution time for Q18 in ms:")
print(dataset.query('tpch_query_id == 18')['total_execution_time'].describe())
print()
print("Total execution time for Q21 in ms:")
print(dataset.query('tpch_query_id == 21')['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(dataset['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(dataset['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(dataset['poll_latency'].describe())
print()
print("Number of premature polls:")
print(dataset['number_of_premature_polls'].describe())
print()
print("Required time to calculate the poll times in ms:")
print(dataset['poll_calculation_time'].describe())
print()
print("Overall job duration in ms:")
print(dataset['job_execution_time'].describe())

#create sub tables for each algorithm
const = dataset[dataset['polling_strategy'].str.contains("ConstantPolling")]
constQ15 = const.query('tpch_query_id == 15')
constQ18 = const.query('tpch_query_id == 18')
constQ21 = const.query('tpch_query_id == 21')
print("----------Constant Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(const['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(const['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(const['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(const['poll_latency'].describe())
print(const['poll_latency'].sum())
print()
print("Number of premature polls:")
print(const['number_of_premature_polls'].describe())
print(const['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(const['poll_calculation_time'].describe())
print(const['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(const['job_execution_time'].describe())
print()
print("------------------Q15 (const.)--------------------")
print("Total execution time in ms:")
print(constQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(constQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(constQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(constQ15['poll_latency'].describe())
print(constQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(constQ15['number_of_premature_polls'].describe())
print(constQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(constQ15['poll_calculation_time'].describe())
print(constQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(constQ15['job_execution_time'].describe())
print()
print("------------------Q18 (const.)--------------------")
print("Total execution time in ms:")
print(constQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(constQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(constQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(constQ18['poll_latency'].describe())
print(constQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(constQ18['number_of_premature_polls'].describe())
print(constQ18['poll_latency'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(constQ18['poll_calculation_time'].describe())
print(constQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(constQ18['job_execution_time'].describe())
print()
print("------------------Q21 (const.)--------------------")
print("Total execution time in ms:")
print(constQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(constQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(constQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(constQ21['poll_latency'].describe())
print(constQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(constQ21['number_of_premature_polls'].describe())
print(constQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(constQ21['poll_calculation_time'].describe())
print(constQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(constQ21['job_execution_time'].describe())
print()

exponential = dataset[dataset['polling_strategy'].str.contains("ExponentialBackoffPolling")]
expQ15 = exponential.query('tpch_query_id == 15')
expQ18 = exponential.query('tpch_query_id == 18')
expQ21 = exponential.query('tpch_query_id == 21')
print("----------Exponential Backoff Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(exponential['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(exponential['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(exponential['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(exponential['poll_latency'].describe())
print(exponential['poll_latency'].sum())
print()
print("Number of premature polls:")
print(exponential['number_of_premature_polls'].describe())
print(exponential['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(exponential['poll_calculation_time'].describe())
print(exponential['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(exponential['job_execution_time'].describe())
print()
print("------------------Q15 (Exp.)--------------------")
print("Total execution time in ms:")
print(expQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(expQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(expQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(expQ15['poll_latency'].describe())
print(expQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(expQ15['number_of_premature_polls'].describe())
print(expQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(expQ15['poll_calculation_time'].describe())
print(expQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(expQ15['job_execution_time'].describe())
print()
print("------------------Q18 (Exp.)--------------------")
print("Total execution time in ms:")
print(expQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(expQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(expQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(expQ18['poll_latency'].describe())
print(expQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(expQ18['number_of_premature_polls'].describe())
print(expQ18['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(expQ18['poll_calculation_time'].describe())
print(expQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(expQ18['job_execution_time'].describe())
print()
print("------------------Q21 (Exp.)--------------------")
print("Total execution time in ms:")
print(expQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(expQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(expQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(expQ21['poll_latency'].describe())
print(expQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(expQ21['number_of_premature_polls'].describe())
print(expQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(expQ21['poll_calculation_time'].describe())
print(expQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(expQ21['job_execution_time'].describe())
print()

squared = dataset[dataset['polling_strategy'].str.contains("SquaredBackoffPolling")]
squaredQ15 = squared.query('tpch_query_id == 15')
squaredQ18 = squared.query('tpch_query_id == 18')
squaredQ21 = squared.query('tpch_query_id == 21')
print("----------Squared Backoff Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(squared['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(squared['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(squared['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(squared['poll_latency'].describe())
print(squared['poll_latency'].sum())
print()
print("Number of premature polls:")
print(squared['number_of_premature_polls'].describe())
print(squared['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(squared['poll_calculation_time'].describe())
print(squared['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(squared['job_execution_time'].describe())
print()
print("------------------Q15 (squared)--------------------")
print("Total execution time in ms:")
print(squaredQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(squaredQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(squaredQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(squaredQ15['poll_latency'].describe())
print(squaredQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(squaredQ15['number_of_premature_polls'].describe())
print(squaredQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(squaredQ15['poll_calculation_time'].describe())
print(squaredQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(squaredQ15['job_execution_time'].describe())
print()
print("------------------Q18 (squared)--------------------")
print("Total execution time in ms:")
print(squaredQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(squaredQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(squaredQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(squaredQ18['poll_latency'].describe())
print(squaredQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(squaredQ18['number_of_premature_polls'].describe())
print(squaredQ18['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(squaredQ18['poll_calculation_time'].describe())
print(squaredQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(squaredQ18['job_execution_time'].describe())
print()
print("------------------Q21 (squared)--------------------")
print("Total execution time in ms:")
print(squaredQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(squaredQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(squaredQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(squaredQ21['poll_latency'].describe())
print(squaredQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(squaredQ21['number_of_premature_polls'].describe())
print(squaredQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(squaredQ21['poll_calculation_time'].describe())
print(squaredQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(squaredQ21['job_execution_time'].describe())
print()

linear = dataset[dataset['polling_strategy'].str.contains("LinearBackoffPolling")]
linearQ15 = linear.query('tpch_query_id == 15')
linearQ18 = linear.query('tpch_query_id == 18')
linearQ21 = linear.query('tpch_query_id == 21')
print("----------Linear Backoff Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(linear['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(linear['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(linear['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(linear['poll_latency'].describe())
print(linear['poll_latency'].sum())
print()
print("Number of premature polls:")
print(linear['number_of_premature_polls'].describe())
print(linear['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(linear['poll_calculation_time'].describe())
print(linear['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(linear['job_execution_time'].describe())
print()
print("------------------Q15 (linear)--------------------")
print("Total execution time in ms:")
print(linearQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(linearQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(linearQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(linearQ15['poll_latency'].describe())
print(linearQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(linearQ15['number_of_premature_polls'].describe())
print(linearQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(linearQ15['poll_calculation_time'].describe())
print(linearQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(linearQ15['job_execution_time'].describe())
print()
print("------------------Q18 (linear)--------------------")
print("Total execution time in ms:")
print(linearQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(linearQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(linearQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(linearQ18['poll_latency'].describe())
print(linearQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(linearQ18['number_of_premature_polls'].describe())
print(linearQ18['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(linearQ18['poll_calculation_time'].describe())
print(linearQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(linearQ18['job_execution_time'].describe())
print()
print("------------------Q21 (linear)--------------------")
print("Total execution time in ms:")
print(linearQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(linearQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(linearQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(linearQ21['poll_latency'].describe())
print(linearQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(linearQ21['number_of_premature_polls'].describe())
print(linearQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(linearQ21['poll_calculation_time'].describe())
print(linearQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(linearQ21['job_execution_time'].describe())
print()

duplicate = dataset[dataset['polling_strategy'].str.contains("DuplicationBackoffPolling")]
duplicateQ15 = duplicate.query('tpch_query_id == 15')
duplicateQ18 = duplicate.query('tpch_query_id == 18')
duplicateQ21 = duplicate.query('tpch_query_id == 21')
print("----------Duplication Backoff Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(duplicate['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(duplicate['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(duplicate['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(duplicate['poll_latency'].describe())
print(duplicate['poll_latency'].sum())
print()
print("Number of premature polls:")
print(duplicate['number_of_premature_polls'].describe())
print(duplicate['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(duplicate['poll_calculation_time'].describe())
print(duplicate['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(duplicate['job_execution_time'].describe())
print()
print("------------------Q15 (duplication)--------------------")
print("Total execution time in ms:")
print(duplicateQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(duplicateQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(duplicateQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(duplicateQ15['poll_latency'].describe())
print(duplicateQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(duplicateQ15['number_of_premature_polls'].describe())
print(duplicateQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(duplicateQ15['poll_calculation_time'].describe())
print(duplicateQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(duplicateQ15['job_execution_time'].describe())
print()
print("------------------Q18 (duplication)--------------------")
print("Total execution time in ms:")
print(duplicateQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(duplicateQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(duplicateQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(duplicateQ18['poll_latency'].describe())
print(duplicateQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(duplicateQ18['number_of_premature_polls'].describe())
print(duplicateQ18['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(duplicateQ18['poll_calculation_time'].describe())
print(duplicateQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(duplicateQ18['job_execution_time'].describe())
print()
print("------------------Q21 (duplication)--------------------")
print("Total execution time in ms:")
print(duplicateQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(duplicateQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(duplicateQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(duplicateQ21['poll_latency'].describe())
print(duplicateQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(duplicateQ21['number_of_premature_polls'].describe())
print(duplicateQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(duplicateQ21['poll_calculation_time'].describe())
print(duplicateQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(duplicateQ21['job_execution_time'].describe())
print()

average = dataset[dataset['polling_strategy'].str.contains("AveragePolling")]
averageQ15 = average.query('tpch_query_id == 15')
averageQ18 = average.query('tpch_query_id == 18')
averageQ21 = average.query('tpch_query_id == 21')
print("----------Average Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(average['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(average['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(average['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(average['poll_latency'].describe())
print(average['poll_latency'].sum())
print()
print("Number of premature polls:")
print(average['number_of_premature_polls'].describe())
print(average['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(average['poll_calculation_time'].describe())
print(average['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(average['job_execution_time'].describe())
print()
print("------------------Q15 (avg)--------------------")
print("Total execution time in ms:")
print(averageQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(averageQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(averageQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(averageQ15['poll_latency'].describe())
print(averageQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(averageQ15['number_of_premature_polls'].describe())
print(averageQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(averageQ15['poll_calculation_time'].describe())
print(averageQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(averageQ15['job_execution_time'].describe())
print()
print("------------------Q18 (avg)--------------------")
print("Total execution time in ms:")
print(averageQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(averageQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(averageQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(averageQ18['poll_latency'].describe())
print(averageQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(averageQ18['number_of_premature_polls'].describe())
print(averageQ18['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(averageQ18['poll_calculation_time'].describe())
print(averageQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(averageQ18['job_execution_time'].describe())
print()
print("------------------Q21 (avg)--------------------")
print("Total execution time in ms:")
print(averageQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(averageQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(averageQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(averageQ21['poll_latency'].describe())
print(averageQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(averageQ21['number_of_premature_polls'].describe())
print(averageQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(averageQ21['poll_calculation_time'].describe())
print(averageQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(averageQ21['job_execution_time'].describe())
print()

moving = dataset[dataset['polling_strategy'].str.contains("MovingAveragePolling")]
movingQ15 = moving.query('tpch_query_id == 15')
movingQ18 = moving.query('tpch_query_id == 18')
movingQ21 = moving.query('tpch_query_id == 21')
print("----------Moving Average Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(moving['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(moving['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(moving['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(moving['poll_latency'].describe())
print(moving['poll_latency'].sum())
print()
print("Number of premature polls:")
print(moving['number_of_premature_polls'].describe())
print(moving['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(moving['poll_calculation_time'].describe())
print(moving['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(moving['job_execution_time'].describe())
print()
print("------------------Q15 (mov avg)--------------------")
print("Total execution time in ms:")
print(movingQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(movingQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(movingQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(movingQ15['poll_latency'].describe())
print(movingQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(movingQ15['number_of_premature_polls'].describe())
print(movingQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(movingQ15['poll_calculation_time'].describe())
print(movingQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(movingQ15['job_execution_time'].describe())
print()
print("------------------Q18 (mov avg)--------------------")
print("Total execution time in ms:")
print(movingQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(movingQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(movingQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(movingQ18['poll_latency'].describe())
print(movingQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(movingQ18['number_of_premature_polls'].describe())
print(movingQ18['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(movingQ18['poll_calculation_time'].describe())
print(movingQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(movingQ18['job_execution_time'].describe())
print()
print("------------------Q21 (mov avg)--------------------")
print("Total execution time in ms:")
print(movingQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(movingQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(movingQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(movingQ21['poll_latency'].describe())
print(movingQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(movingQ21['number_of_premature_polls'].describe())
print(movingQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(movingQ21['poll_calculation_time'].describe())
print(movingQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(movingQ21['job_execution_time'].describe())
print()

DNN = dataset[dataset['polling_strategy'].str.contains("DNNModelPolling")]
DNNFitted = datasetFitted[datasetFitted['polling_strategy'].str.contains("DNNModelPolling")]
DNNQ15 = DNN.query('tpch_query_id == 15')
DNNQ18 = DNN.query('tpch_query_id == 18')
DNNQ21 = DNN.query('tpch_query_id == 21')
print("----------DNN Model Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(DNN['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(DNN['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(DNN['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(DNN['poll_latency'].describe())
print(DNN['poll_latency'].sum())
print()
print("Number of premature polls:")
print(DNN['number_of_premature_polls'].describe())
print(DNN['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(DNN['poll_calculation_time'].describe())
print(DNN['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(DNN['job_execution_time'].describe())
print()
print("------------------Q15 (DNN)--------------------")
print("Total execution time in ms:")
print(DNNQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(DNNQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(DNNQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(DNNQ15['poll_latency'].describe())
print(DNNQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(DNNQ15['number_of_premature_polls'].describe())
print(DNNQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(DNNQ15['poll_calculation_time'].describe())
print(DNNQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(DNNQ15['job_execution_time'].describe())
print()
print("------------------Q18 (DNN)--------------------")
print("Total execution time in ms:")
print(DNNQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(DNNQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(DNNQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(DNNQ18['poll_latency'].describe())
print(DNNQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(DNNQ18['number_of_premature_polls'].describe())
print(DNNQ18['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(DNNQ18['poll_calculation_time'].describe())
print(DNNQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(DNNQ18['job_execution_time'].describe())
print()
print("------------------Q21 (DNN)--------------------")
print("Total execution time in ms:")
print(DNNQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(DNNQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(DNNQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(DNNQ21['poll_latency'].describe())
print(DNNQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(DNNQ21['number_of_premature_polls'].describe())
print(DNNQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(DNNQ21['poll_calculation_time'].describe())
print(DNNQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(DNNQ21['job_execution_time'].describe())
print()

RF = dataset[dataset['polling_strategy'].str.contains("RandomForestPolling")]
RFQ15 = RF.query('tpch_query_id == 15')
RFQ18 = RF.query('tpch_query_id == 18')
RFQ21 = RF.query('tpch_query_id == 21')
print("----------RF Model Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(RF['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(RF['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(RF['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(RF['poll_latency'].describe())
print(RF['poll_latency'].sum())
print()
print("Number of premature polls:")
print(RF['number_of_premature_polls'].describe())
print(RF['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(RF['poll_calculation_time'].describe())
print(RF['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(RF['job_execution_time'].describe())
print()
print("------------------Q15 (RF)--------------------")
print("Total execution time in ms:")
print(RFQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(RFQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(RFQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(RFQ15['poll_latency'].describe())
print(RFQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(RFQ15['number_of_premature_polls'].describe())
print(RFQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(RFQ15['poll_calculation_time'].describe())
print(RFQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(RFQ15['job_execution_time'].describe())
print()
print("------------------Q18 (RF)--------------------")
print("Total execution time in ms:")
print(RFQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(RFQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(RFQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(RFQ18['poll_latency'].describe())
print(RFQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(RFQ18['number_of_premature_polls'].describe())
print(RFQ18['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(RFQ18['poll_calculation_time'].describe())
print(RFQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(RFQ18['job_execution_time'].describe())
print()
print("------------------Q21 (RF)--------------------")
print("Total execution time in ms:")
print(RFQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(RFQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(RFQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(RFQ21['poll_latency'].describe())
print(RFQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(RFQ21['number_of_premature_polls'].describe())
print(RFQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(RFQ21['poll_calculation_time'].describe())
print(RFQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(RFQ21['job_execution_time'].describe())
print()

Reg = dataset[dataset['polling_strategy'].str.contains("RegressionPolling")]
RegFitted = datasetFitted[datasetFitted['polling_strategy'].str.contains("RegressionPolling")]
RegQ15 = Reg.query('tpch_query_id == 15')
RegQ18 = Reg.query('tpch_query_id == 18')
RegQ21 = Reg.query('tpch_query_id == 21')
print("----------Regression Model Polling------------")
print("------------------All Queries--------------------")
print("Total execution time:")
print(Reg['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(Reg['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(Reg['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(Reg['poll_latency'].describe())
print(Reg['poll_latency'].sum())
print()
print("Number of premature polls:")
print(Reg['number_of_premature_polls'].describe())
print(Reg['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(Reg['poll_calculation_time'].describe())
print(Reg['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(Reg['job_execution_time'].describe())
print()
print("------------------Q15 (Regression)--------------------")
print("Total execution time in ms:")
print(RegQ15['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(RegQ15['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(RegQ15['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(RegQ15['poll_latency'].describe())
print(RegQ15['poll_latency'].sum())
print()
print("Number of premature polls:")
print(RegQ15['number_of_premature_polls'].describe())
print(RegQ15['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(RegQ15['poll_calculation_time'].describe())
print(RegQ15['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(RegQ15['job_execution_time'].describe())
print()
print("------------------Q18 (Regression)--------------------")
print("Total execution time in ms:")
print(RegQ18['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(RegQ18['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(RegQ18['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(RegQ18['poll_latency'].describe())
print(RegQ18['poll_latency'].sum())
print()
print("Number of premature polls:")
print(RegQ18['number_of_premature_polls'].describe())
print(RegQ18['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(RegQ18['poll_calculation_time'].describe())
print(RegQ18['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(RegQ18['job_execution_time'].describe())
print()
print("------------------Q21 (Regression)--------------------")
print("Total execution time in ms:")
print(RegQ21['total_execution_time'].describe())
print()
print("Latency between the task was polled by the backend and the function was started in ms:")
print(RegQ21['function_start_latency'].describe())
print()
print("Duration of the function execution in ms:")
print(RegQ21['function_execution_duration'].describe())
print()
print("Latency between function completion and final poll in ms:")
print(RegQ21['poll_latency'].describe())
print(RegQ21['poll_latency'].sum())
print()
print("Number of premature polls:")
print(RegQ21['number_of_premature_polls'].describe())
print(RegQ21['number_of_premature_polls'].sum())
print()
print("Required time to calculate the poll times in ms:")
print(RegQ21['poll_calculation_time'].describe())
print(RegQ21['poll_calculation_time'].sum())
print()
print("Overall job duration in ms:")
print(RegQ21['job_execution_time'].describe())
print()





# initialize list elements
sumData = [
['Constant Polling', const['number_of_premature_polls'].sum(), round(const['poll_latency'].sum())],
['Exponential Backoff', exponential['number_of_premature_polls'].sum(), round(exponential['poll_latency'].sum())],
['Squared Backoff', squared['number_of_premature_polls'].sum(), round(squared['poll_latency'].sum())],
['Linear Backoff', linear['number_of_premature_polls'].sum(), round(linear['poll_latency'].sum())],
['Duplicate Backoff', duplicate['number_of_premature_polls'].sum(), round(duplicate['poll_latency'].sum())],
['Average (all)', average['number_of_premature_polls'].sum(), round(average['poll_latency'].sum())],
['Moving Average (5)', moving['number_of_premature_polls'].sum(), round(moving['poll_latency'].sum())],
['DNN Prediction', DNN['number_of_premature_polls'].sum(), round(DNN['poll_latency'].sum())],
#['Random Forest Prediction', RF['number_of_premature_polls'].sum(), round(RF['poll_latency'].sum())],
['Regression Prediction', Reg['number_of_premature_polls'].sum(), round(Reg['poll_latency'].sum())],
['DNN Prediction (fitted)', DNNFitted['number_of_premature_polls'].sum(), round(DNN['poll_latency'].sum())],
['Regression Prediction (fitted)', RegFitted['number_of_premature_polls'].sum(), round(Reg['poll_latency'].sum())],
]

sumPPData = [
['Constant Polling', const['number_of_premature_polls'].sum()],
['Exponential Backoff', exponential['number_of_premature_polls'].sum()],
['Squared Backoff', squared['number_of_premature_polls'].sum()],
['Linear Backoff', linear['number_of_premature_polls'].sum()],
['Duplicate Backoff', duplicate['number_of_premature_polls'].sum()],
['Average (all)', average['number_of_premature_polls'].sum()],
['Moving Average (5)', moving['number_of_premature_polls'].sum()],
['DNN Prediction', DNN['number_of_premature_polls'].sum()],
#['Random Forest Prediction', RF['number_of_premature_polls'].sum()],
['Regression Prediction', Reg['number_of_premature_polls'].sum()],
['DNN Prediction (fitted)', DNNFitted['number_of_premature_polls'].sum()],
#['Random Forest Prediction', RF['number_of_premature_polls'].sum()],
['Regression Prediction (fitted)', RegFitted['number_of_premature_polls'].sum()],
]

sumLTData = [
['Constant Polling', round(const['poll_latency'].sum())],
['Exponential Backoff', round(exponential['poll_latency'].sum())],
['Squared Backoff', round(squared['poll_latency'].sum())],
['Linear Backoff', round(linear['poll_latency'].sum())],
['Duplicate Backoff', round(duplicate['poll_latency'].sum())],
['Average (all)', round(average['poll_latency'].sum())],
['Moving Average (5)', round(moving['poll_latency'].sum())],
['DNN Prediction', round(DNN['poll_latency'].sum())],
#['Random Forest Prediction', round(RF['poll_latency'].sum())],
['Regression Prediction', round(Reg['poll_latency'].sum())],
['DNN Prediction (fitted)', round(DNNFitted['poll_latency'].sum())],
#['Random Forest Prediction', round(RF['poll_latency'].sum())],
['Regression Prediction (fitted)', round(RegFitted['poll_latency'].sum())],
]

meanData = [
['Constant Polling', const['number_of_premature_polls'].mean(), round(const['poll_latency'].mean())],
['Exponential Backoff', exponential['number_of_premature_polls'].mean(), round(exponential['poll_latency'].mean())],
['Squared Backoff', squared['number_of_premature_polls'].mean(), round(squared['poll_latency'].mean())],
['Linear Backoff', linear['number_of_premature_polls'].mean(), round(linear['poll_latency'].mean())],
['Duplicate Backoff', duplicate['number_of_premature_polls'].mean(), round(duplicate['poll_latency'].mean())],
['Average (all)', average['number_of_premature_polls'].mean(), round(average['poll_latency'].mean())],
['Moving Average (5)', moving['number_of_premature_polls'].mean(), round(moving['poll_latency'].mean())],
['DNN Prediction', DNN['number_of_premature_polls'].mean(), round(DNN['poll_latency'].mean())],
#['Random Forest Prediction', RF['number_of_premature_polls'].mean(), round(RF['poll_latency'].mean())],
['Regression Prediction', Reg['number_of_premature_polls'].mean(), round(Reg['poll_latency'].mean())],
['DNN Prediction (fitted)', DNNFitted['number_of_premature_polls'].mean(), round(DNN['poll_latency'].mean())],
['Regression Prediction (fitted)', RegFitted['number_of_premature_polls'].mean(), round(Reg['poll_latency'].mean())],
]

totalData = [
['Constant Polling', const.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(const['job_execution_time'].mean())],
['Exponential Backoff', exponential.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(exponential['job_execution_time'].mean())],
['Squared Backoff', squared.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(squared['job_execution_time'].mean())],
['Linear Backoff', linear.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(linear['job_execution_time'].mean())],
['Duplicate Backoff', duplicate.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(duplicate['job_execution_time'].mean())],
['Average (all)', average.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(average['job_execution_time'].mean())],
['Moving Average (5)', moving.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(moving['job_execution_time'].mean())],
['DNN Prediction', DNN.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(DNN['job_execution_time'].mean())],
#['Random Forest Prediction', RF['number_of_premature_polls'].mean(), round(RF['poll_latency'].mean())],
['Regression Prediction', Reg.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(Reg['job_execution_time'].mean())],
['DNN Prediction (fitted)', DNNFitted.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(DNN['job_execution_time'].mean())],
['Regression Prediction (fitted)', RegFitted.groupby(['job_id'], as_index=False).sum()['number_of_premature_polls'].mean(), round(Reg['job_execution_time'].mean())],
    ]

meanPPData = [
['Constant Polling', const['number_of_premature_polls'].mean(), const['number_of_premature_polls'].std()],
['Exponential Backoff', exponential['number_of_premature_polls'].mean(), exponential['number_of_premature_polls'].std()],
['Squared Backoff', squared['number_of_premature_polls'].mean(), squared['number_of_premature_polls'].std()],
['Linear Backoff', linear['number_of_premature_polls'].mean(), linear['number_of_premature_polls'].std()],
['Duplicate Backoff', duplicate['number_of_premature_polls'].mean(), duplicate['number_of_premature_polls'].std()],
['Average (all)', average['number_of_premature_polls'].mean(), average['number_of_premature_polls'].std()],
['Moving Average (5)', moving['number_of_premature_polls'].mean(), moving['number_of_premature_polls'].std()],
['DNN Prediction', DNN['number_of_premature_polls'].mean(), DNN['number_of_premature_polls'].std()],
#['Random Forest Prediction', RF['number_of_premature_polls'].mean()],
['Regression Prediction', Reg['number_of_premature_polls'].mean(), Reg['number_of_premature_polls'].std()],
['DNN Prediction (fitted)', DNNFitted['number_of_premature_polls'].mean(), DNNFitted['number_of_premature_polls'].std()],
['Regression Prediction (fitted)', RegFitted['number_of_premature_polls'].mean(), RegFitted['number_of_premature_polls'].std()],
]

meanLTData = [
['Constant Polling', round(const['poll_latency'].mean()), const['poll_latency'].std()],
['Exponential Backoff', round(exponential['poll_latency'].mean()), exponential['poll_latency'].std()],
['Squared Backoff', round(squared['poll_latency'].mean()), squared['poll_latency'].std()],
['Linear Backoff', round(linear['poll_latency'].mean()), linear['poll_latency'].std()],
['Duplicate Backoff', round(duplicate['poll_latency'].mean()), duplicate['poll_latency'].std()],
['Average (all)', round(average['poll_latency'].mean()), average['poll_latency'].std()],
['Moving Average (5)', round(moving['poll_latency'].mean()), moving['poll_latency'].std()],
['DNN Prediction', round(DNN['poll_latency'].mean()), DNN['poll_latency'].std()],
#['Random Forest Prediction', round(RF['poll_latency'].mean())],
['Regression Prediction', round(Reg['poll_latency'].mean()), Reg['poll_latency'].std()],
['DNN Prediction (fitted)', round(DNNFitted['poll_latency'].mean()), DNNFitted['poll_latency'].std()],
['Regression Prediction (fitted)', round(RegFitted['poll_latency'].mean()), RegFitted['poll_latency'].std()],
]


sumDf = pd.DataFrame(sumData, columns=['Polling Strategy', 'Total Number Of Premature Polls', 'Total Poll Latency (s)'])
sumPPDf = pd.DataFrame(sumPPData, columns=['Polling Strategy', 'Total Number Of Premature Polls'])
sumLTDf = pd.DataFrame(sumLTData, columns=['Polling Strategy', 'Total Poll Latency (s)'])

meanDf = pd.DataFrame(meanData, columns=['Polling Strategy', 'Total Number Of Premature Polls', 'Total Poll Latency (s)'])
meanPPDf = pd.DataFrame(meanPPData, columns=['Polling Strategy', 'Total Number Of Premature Polls', 'std'])
meanLTDf = pd.DataFrame(meanLTData, columns=['Polling Strategy', 'Total Poll Latency (s)', 'std'])

totalDF = pd.DataFrame(totalData, columns=['Polling Strategy', 'Average job duration', 'Average polls per job'])
print(totalDF['Average job duration'])

#sumDf.plot(kind='barh', secondary_y='Total Poll Latency (s)', x='Polling Strategy')
#plt.show(block=True)

fig = plt.figure() # Create matplotlib figure
ax = fig.add_subplot(111) # Create matplotlib axes
ax2 = ax.twinx() # Create another axes that shares the same x-axis as ax.
width = 0.2

totalDF.plot(kind='bar', rot=30, label='Average job duration', legend=False, y='Average job duration', x='Polling Strategy', ylabel='Seconds', ax=ax, position=0, width=width, color='salmon',figsize=(20,10))
totalDF.plot(kind='bar', rot=30, label='Average polls per job', legend=False, y='Average polls per job', x='Polling Strategy', ylabel='Polls', ax=ax2, position=1, width=width, color='royalblue', figsize=(20,10))
fig.legend(loc=1)
plt.title('Total latency and polls per strategy')
plt.show(block=True)


fig = plt.figure() # Create matplotlib figure
ax = fig.add_subplot(111) # Create matplotlib axes
ax2 = ax.twinx() # Create another axes that shares the same x-axis as ax.
width = 0.2

sumPPDf.plot(kind='bar', rot=30, label='Total Premature Polls', legend=False, y='Total Number Of Premature Polls', x='Polling Strategy', ylabel='Polls', ax=ax, position=1, width=width, color='royalblue',figsize=(20,10))
sumLTDf.plot(kind='bar', rot=30, label='Total Poll Latency', legend=False, y='Total Poll Latency (s)', x='Polling Strategy', ylabel='Seconds', ax=ax2, position=0, width=width, color='lightseagreen', figsize=(20,10))
fig.legend(loc=1)
plt.title('Total latency and polls per strategy')
plt.show(block=True)


fig = plt.figure() # Create matplotlib figure
ax = fig.add_subplot(111) # Create matplotlib axes
ax2 = ax.twinx() # Create another axes that shares the same x-axis as ax.
width = 0.2
meanPPDf.plot(kind='bar', rot=30, legend=False, label='Average Premature Polls', y='Total Number Of Premature Polls', x='Polling Strategy', ylabel='Polls', ax=ax, position=1, width=width, color='royalblue',figsize=(20,10))
meanLTDf.plot(kind='bar', rot=30, legend=False, label='Average Poll Latency', y='Total Poll Latency (s)', x='Polling Strategy', ylabel='Seconds', ax=ax2, position=0, width=width, color='lightseagreen', figsize=(20,10))
fig.legend(loc=1)
plt.title('Average latency and polls per strategy and task')
plt.show(block=True)

fig = plt.figure() # Create matplotlib figure
ax = fig.add_subplot(111) # Create matplotlib axes
ax2 = ax.twinx() # Create another axes that shares the same x-axis as ax.
width = 0.2
meanPPDf.plot(kind='bar', rot=30, legend=False, label='Std Average Premature Polls', y='std', x='Polling Strategy', ylabel='Polls', ax=ax, position=1, width=width, color='royalblue',figsize=(20,10))
meanLTDf.plot(kind='bar', rot=30, legend=False, label='Std Average Poll Latency', y='std', x='Polling Strategy', ylabel='Seconds', ax=ax2, position=0, width=width, color='lightseagreen', figsize=(20,10))
fig.legend(loc=1)
plt.title('Standard deviation of premature polls and poll latency')
plt.show(block=True)

dataset = dataset.query('total_execution_time < 300')
dataset['total_execution_time']=dataset['total_execution_time']
dataset.hist(['total_execution_time'], bins=50, color='royalblue')
plt.title('Total Execution Time Histogram')
plt.xlabel('Seconds')
plt.ylabel('Frequency')
plt.show(block=True)








